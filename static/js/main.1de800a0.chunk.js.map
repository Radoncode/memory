{"version":3,"sources":["Card.js","GuessCount.js","HallOfFame.js","HighScoreInput.js","App.js","reportWebVitals.js","index.js"],"names":["Card","card","feedback","index","onClick","className","GuessCount","guesses","HallOfFame","entries","map","id","date","player","saveHOFEntry","entry","onStored","Date","toLocaleDateString","now","JSON","parse","localStorage","getItem","insertionPoint","findIndex","push","splice","length","setItem","stringify","HighScoreInput","state","winner","handleWinnerUpdate","event","setState","target","value","toUpperCase","persistWinner","preventDefault","props","onSubmit","this","type","autoComplete","onChange","Component","App","cards","generateCards","currentPair","hallOfFame","matchedCardIndices","handleCardClick","handleNewPairClosedBy","displayHallOfFame","indexMatched","includes","result","candidates","shuffle","SIDE","pop","newPair","newGuesses","matched","setTimeout","won","getFeedBackForCard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAyBeA,EApBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,QAA1B,OACT,qBAAKC,UAAS,eAAUH,GAAYE,QAAS,kBAAMA,EAAQD,IAA3D,SACI,sBAAME,UAAU,SAAhB,SACkB,WAAbH,EALS,SAK+BD,OCCtCK,G,MANI,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,qBAAKF,UAAU,UAAf,SAA0BE,MC0B/CC,G,MAzBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACjB,uBAAOJ,UAAU,aAAjB,SACE,gCACGI,EAAQC,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,KAAML,EAAZ,EAAYA,QAASM,EAArB,EAAqBA,OAArB,OACT,+BACE,oBAAIR,UAAU,OAAd,SAAsBO,IACtB,oBAAIP,UAAU,UAAd,SAAyBE,IACzB,oBAAIF,UAAU,SAAd,SAAwBQ,MAHjBF,YAmCZ,SAASG,EAAaC,EAAOC,GAClCD,EAAMH,MAAO,IAAIK,MAAOC,qBACxBH,EAAMJ,GAAKM,KAAKE,MAEhB,IAAMV,EAAUW,KAAKC,MAAMC,aAAaC,QAP1B,yBAO8C,MACtDC,EAAiBf,EAAQgB,WAC7B,qBAAGlB,SAAyBQ,EAAMR,WAGb,IAAnBiB,EACFf,EAAQiB,KAAKX,GAEbN,EAAQkB,OAAOH,EAAgB,EAAGT,GAEhCN,EAAQmB,OAhBO,IAiBjBnB,EAAQkB,OAjBS,GAiBYlB,EAAQmB,QAGvCN,aAAaO,QApBM,GAoBgBT,KAAKU,UAAUrB,IAClDO,EAASP,G,UCtBIsB,E,4MAhCXC,MAAQ,CAAEC,OAAQ,I,EAElBC,mBAAqB,SAACC,GAClB,EAAKC,SAAS,CAAEH,OAAQE,EAAME,OAAOC,MAAMC,iB,EAG/CC,cAAgB,SAACL,GACbA,EAAMM,iBAEN3B,EADiB,CAAEP,QAAS,EAAKmC,MAAMnC,QAASM,OAAQ,EAAKmB,MAAMC,QAC5C,EAAKS,MAAM1B,W,4CAEtC,WACI,OACI,sBAAMX,UAAU,iBAAiBsC,SAAUC,KAAKJ,cAAhD,SACI,8BACI,iEAEI,uBAAOK,KAAK,OAAOC,aAAa,kBAEpC,uBAAOA,aAAa,aAAaD,KAAK,OAAOE,SAAUH,KAAKV,mBAAoBI,MAAOM,KAAKZ,MAAMC,SAClG,wBAAQY,KAAK,SAAb,oC,GArBSG,aCqGdC,E,4MA5FbjB,MAAQ,CACNkB,MAAO,EAAKC,gBACZC,YAAa,GACb7C,QAAS,EACT8C,WAAY,KACZC,mBAAoB,I,EA2CtBC,gBAAkB,SAAApD,GAAU,IAClBiD,EAAgB,EAAKpB,MAArBoB,YAEmB,IAAvBA,EAAYxB,SAIW,IAAvBwB,EAAYxB,OAKhB,EAAK4B,sBAAsBrD,GAJzB,EAAKiC,SAAS,CAAEgB,YAAa,CAACjD,O,EAOlCsD,kBAAoB,SAACjD,GACnB,EAAK4B,SAAS,CAAE5B,gB,wDAxDlB,SAAmBL,GAAQ,IAAD,EACoByC,KAAKZ,MAAzCoB,EADgB,EAChBA,YACFM,EAFkB,EACHJ,mBACmBK,SAASxD,GAEjD,OAAIiD,EAAYxB,OAAS,EAChB8B,GAAgBvD,IAAUiD,EAAY,GAAK,UAAY,SAG5DA,EAAYO,SAASxD,GAChBuD,EAAe,cAAgB,iBAGjCA,EAAe,UAAY,W,2BAGpC,WAIE,IAHA,IAAME,EAAS,GAETC,EAAaC,IA/BP,4NAgCLF,EAAOhC,OAFDmC,IAEgB,CAC3B,IAAM9D,EAAO4D,EAAWG,MACxBJ,EAAOlC,KAAKzB,EAAMA,GAEpB,OAAO6D,IAAQF,K,mCAGjB,SAAsBzD,GAAQ,IAAD,SACiCyC,KAAKZ,MAAzDkB,EADmB,EACnBA,MAAOE,EADY,EACZA,YAAa7C,EADD,EACCA,QAAS+C,EADV,EACUA,mBAE/BW,EAAU,CAACb,EAAY,GAAIjD,GAC3B+D,EAAa3D,EAAU,EACvB4D,EAAUjB,EAAMe,EAAQ,MAAQf,EAAMe,EAAQ,IACpDrB,KAAKR,SAAS,CAAEgB,YAAaa,EAAS1D,QAAS2D,IAC3CC,GACFvB,KAAKR,SAAS,CAACkB,mBAAmB,GAAD,mBAAMA,GAAuBW,KAEhEG,YAAW,kBAAM,EAAKhC,SAAS,CAACgB,YAAa,OAhDtB,O,oBAsEzB,WAAU,IAAD,SACoDR,KAAKZ,MAAxDkB,EADD,EACCA,MAAO3C,EADR,EACQA,QAAS8C,EADjB,EACiBA,WAClBgB,EAFC,EAC6Bf,mBACL1B,SAAWsB,EAAMtB,OAChD,OACE,sBAAKvB,UAAU,SAAf,UACE,cAAC,EAAD,CAAYE,QAASA,IACpB2C,EAAMxC,KAAI,SAACT,EAAME,GAAP,OACX,cAAC,EAAD,CAAMF,KAAMA,EACNC,SAAU,EAAKoE,mBAAmBnE,GAClCA,MAAOA,EAEPC,QAAS,EAAKmD,iBADTpD,MAITkE,IACGhB,EACC,cAAC,EAAD,CAAY5C,QAAS4C,IAErB,cAAC,EAAD,CAAgB9C,QAASA,EAASS,SAAU4B,KAAKa,4B,GAtF7CT,aCFHuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1de800a0.chunk.js","sourcesContent":["import './Card.css'\nimport PropTypes from 'prop-types';\n\nconst HIDDEN_SYMBOL = '❓'\n\nconst Card = ({ card, feedback, index, onClick }) => (\n    <div className={`card ${feedback}`} onClick={() => onClick(index)}>\n        <span className=\"symbol\">\n            {feedback === 'hidden' ? HIDDEN_SYMBOL : card}\n        </span>\n    </div>\n) \n\nCard.propTypes = {\n    card: PropTypes.string.isRequired,\n    feedback: PropTypes.oneOf([\n        'hidden',\n        'justMatched',\n        'justMismatched',\n        'visible',\n    ]).isRequired,\n    index: PropTypes.number.isRequired,\n    onClick: PropTypes.func.isRequired,\n}\n\nexport default Card\n","import './GuessCount.css'\nimport PropTypes from 'prop-types';\n\nconst GuessCount = ({ guesses }) => <div className=\"guesses\">{guesses}</div>\n\nGuessCount.propTypes = {\n    guesses: PropTypes.number.isRequired\n}\n\nexport default GuessCount\n","import PropTypes from 'prop-types';\nimport './HallOfFame.css'\n\n\nconst HallOfFame = ({ entries }) => (\n  <table className=\"hallOfFame\">\n    <tbody>\n      {entries.map(({id, date, guesses, player}) => (\n          <tr key={id}>\n            <td className=\"date\">{date}</td>\n            <td className=\"guesses\">{guesses}</td>\n            <td className=\"player\">{player}</td>\n          </tr>\n      ))}\n    </tbody>\n  </table>\n)\n\nHallOfFame.propTypes = {\n  entries: PropTypes.arrayOf(\n    PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      guesses: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      player: PropTypes.string.isRequired\n    })\n  ).isRequired\n}\n\nexport default HallOfFame;\n\n// == Internal helpers ==============================================\n\nexport const FAKE_HOF = [\n  { id: 3, guesses: 18, date: '10/10/2017', player: 'Jane' },\n  { id: 2, guesses: 23, date: '11/10/2017', player: 'Kevin' },\n  { id: 1, guesses: 31, date: '06/10/2017', player: 'Louisa' },\n  { id: 0, guesses: 48, date: '14/10/2017', player: 'Marc' },\n]\n\nconst HOF_KEY = '::Memory::HallofFame';\nconst HOF_MAX_SIZE = 10;\n\nexport function saveHOFEntry(entry, onStored) {\n  entry.date = new Date().toLocaleDateString()\n  entry.id = Date.now();\n\n  const entries = JSON.parse(localStorage.getItem(HOF_KEY) || '[]');\n  const insertionPoint = entries.findIndex(\n    ({ guesses }) => guesses >= entry.guesses\n  )\n\n  if (insertionPoint === 1) {\n    entries.push(entry)\n  } else {\n    entries.splice(insertionPoint, 0, entry)\n  }\n  if (entries.length > HOF_MAX_SIZE) {\n    entries.splice(HOF_MAX_SIZE, entries.length)\n  }\n\n  localStorage.setItem(HOF_MAX_SIZE, JSON.stringify(entries))\n  onStored(entries)\n}\n\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nimport './HighScoreInput.css';\n\nimport { saveHOFEntry } from './HallOfFame';\n\nclass HighScoreInput extends Component {\n    state = { winner: '' }\n\n    handleWinnerUpdate = (event) => {\n        this.setState({ winner: event.target.value.toUpperCase() })\n    }\n\n    persistWinner = (event) => {\n        event.preventDefault();\n        const newEntry = { guesses: this.props.guesses, player: this.state.winner };\n        saveHOFEntry(newEntry, this.props.onStored)\n    }\n    render () {\n        return (\n            <form className=\"highScoreInput\" onSubmit={this.persistWinner}>\n                <p>\n                    <label>\n                        Bravo ! Entre ton prénom:\n                        <input type=\"text\" autoComplete=\"given-name\"/>\n                    </label>\n                    <input autoComplete=\"given-name\" type=\"text\" onChange={this.handleWinnerUpdate} value={this.state.winner} />\n                    <button type=\"submit\">J'ai gagné</button>\n                </p>\n            </form>\n        )\n    }\n}\n\nHighScoreInput.propTypes = {\n    guesses: PropTypes.number.isRequired,\n    onStored: PropTypes.func.isRequired,\n}\n\nexport default HighScoreInput;","import React, { Component } from 'react'\nimport shuffle from 'lodash.shuffle'\n\nimport './App.css'\n\nimport Card from './Card'\nimport GuessCount from './GuessCount'\nimport HallOfFame from './HallOfFame';\nimport HighScoreInput from './HighScoreInput'\n\nconst SIDE = 6\nconst SYMBOLS = '😀🎉💖🎩🐶🐱🦄🐬🌍🌛🌞💫🍎🍌🍓🍐🍟🍿';\nconst VISUAL_PAUSE_MSECS = 750;\n\nclass App extends Component {\n   \n  state = {\n    cards: this.generateCards(),\n    currentPair: [],\n    guesses: 0,\n    hallOfFame: null,\n    matchedCardIndices: [],\n  }\n\n  getFeedBackForCard(index) {\n    const { currentPair, matchedCardIndices } = this.state;\n    const indexMatched = matchedCardIndices.includes(index);\n\n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden'\n    }\n\n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched'\n    }\n\n    return indexMatched ? 'visible' : 'hidden'\n  }\n\n  generateCards() {\n    const result = []\n    const size = SIDE * SIDE\n    const candidates = shuffle(SYMBOLS)\n    while (result.length < size) {\n      const card = candidates.pop()\n      result.push(card, card)\n    }\n    return shuffle(result)\n  }\n\n  handleNewPairClosedBy(index) {\n    const { cards, currentPair, guesses, matchedCardIndices } = this.state;\n\n    const newPair = [currentPair[0], index];\n    const newGuesses = guesses + 1;\n    const matched = cards[newPair[0]] === cards[newPair[1]];\n    this.setState({ currentPair: newPair, guesses: newGuesses });\n    if (matched) {\n      this.setState({matchedCardIndices: [...matchedCardIndices, ...newPair]})\n    }\n    setTimeout(() => this.setState({currentPair: [] }), VISUAL_PAUSE_MSECS)\n\n  }\n\n  handleCardClick = index => {\n    const { currentPair } = this.state;\n\n    if (currentPair.length === 2) {\n      return;\n    }\n\n    if (currentPair.length === 0) {\n      this.setState({ currentPair: [index] })\n      return;\n    }\n\n    this.handleNewPairClosedBy(index);\n  }\n\n  displayHallOfFame = (HallOfFame) => {\n    this.setState({ HallOfFame })\n  }\n  render() {\n    const { cards, guesses, hallOfFame, matchedCardIndices } = this.state;\n    const won = matchedCardIndices.length === cards.length;\n    return (\n      <div className=\"memory\">\n        <GuessCount guesses={guesses} />\n        {cards.map((card, index) => (\n        <Card card={card} \n              feedback={this.getFeedBackForCard(index)}\n              index={index}\n              key={index}\n              onClick={this.handleCardClick} />\n        ))}\n        {\n          won && \n            (hallOfFame ? (\n              <HallOfFame entries={hallOfFame} />\n            ) : (\n              <HighScoreInput guesses={guesses} onStored={this.displayHallOfFame} />\n            ))\n        }\n      </div>\n    )\n  }\n}\n\nexport default App\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}